{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOBs5dyih+3IVmnw8Z8mqhI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Use the \"raw\" URL for the CSV file\n","url = 'https://raw.githubusercontent.com/nandarishik/Ferry-Internship/main/realistic_medication_adherence_data.csv'\n","\n","df = pd.read_csv(url)\n","\n","# Preview the first 5 rows of the data\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"KIa6wY80f-I3","executionInfo":{"status":"ok","timestamp":1759074804950,"user_tz":-330,"elapsed":284,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"ef8f70ea-689b-4e83-9139-4183c6e8515c"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age  gender education_level income_bracket location_type  hemoglobin_level  \\\n","0   56  Female       Secondary            Low         Rural             13.42   \n","1   24    Male        Graduate         Medium         Urban             11.18   \n","2   25  Female       Secondary            Low         Urban             13.77   \n","3   45    Male       Secondary         Medium         Rural             14.57   \n","4   32    Male        Graduate           High         Urban             13.57   \n","\n","   iron_deficiency_status  comorbidities_count  lab_test_frequency  \\\n","0                   False                    2                   5   \n","1                   False                    0                   3   \n","2                   False                    0                   2   \n","3                   False                    4                   2   \n","4                   False                    0                   0   \n","\n","   side_effects_reported  ... refill_gap_days health_literacy_score  \\\n","0                  False  ...            14.0                  0.69   \n","1                  False  ...            17.0                  0.73   \n","2                  False  ...            16.0                  0.21   \n","3                   True  ...             6.0                  0.62   \n","4                  False  ...            19.0                  0.46   \n","\n","   depression_score  social_support_index  belief_in_medication  \\\n","0              0.06                  3.66                  0.62   \n","1              1.28                  0.07                  0.78   \n","2              1.54                  0.23                  0.71   \n","3              1.25                  2.25                  0.48   \n","4              1.69                  4.71                  0.35   \n","\n","   distance_to_clinic_km  insurance_status  medication_cost_inr  \\\n","0                  19.19              True               492.45   \n","1                   4.45             False               452.67   \n","2                   1.47             False               322.68   \n","3                  12.62             False               362.98   \n","4                   0.38              True               124.10   \n","\n","   provider_consistency  medication_adherence  \n","0                  True                     0  \n","1                  True                     0  \n","2                 False                     0  \n","3                  True                     0  \n","4                  True                     1  \n","\n","[5 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-15478ff7-ac97-4af6-948e-b5b8ce92f0a6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>gender</th>\n","      <th>education_level</th>\n","      <th>income_bracket</th>\n","      <th>location_type</th>\n","      <th>hemoglobin_level</th>\n","      <th>iron_deficiency_status</th>\n","      <th>comorbidities_count</th>\n","      <th>lab_test_frequency</th>\n","      <th>side_effects_reported</th>\n","      <th>...</th>\n","      <th>refill_gap_days</th>\n","      <th>health_literacy_score</th>\n","      <th>depression_score</th>\n","      <th>social_support_index</th>\n","      <th>belief_in_medication</th>\n","      <th>distance_to_clinic_km</th>\n","      <th>insurance_status</th>\n","      <th>medication_cost_inr</th>\n","      <th>provider_consistency</th>\n","      <th>medication_adherence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>56</td>\n","      <td>Female</td>\n","      <td>Secondary</td>\n","      <td>Low</td>\n","      <td>Rural</td>\n","      <td>13.42</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>14.0</td>\n","      <td>0.69</td>\n","      <td>0.06</td>\n","      <td>3.66</td>\n","      <td>0.62</td>\n","      <td>19.19</td>\n","      <td>True</td>\n","      <td>492.45</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>24</td>\n","      <td>Male</td>\n","      <td>Graduate</td>\n","      <td>Medium</td>\n","      <td>Urban</td>\n","      <td>11.18</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>17.0</td>\n","      <td>0.73</td>\n","      <td>1.28</td>\n","      <td>0.07</td>\n","      <td>0.78</td>\n","      <td>4.45</td>\n","      <td>False</td>\n","      <td>452.67</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>25</td>\n","      <td>Female</td>\n","      <td>Secondary</td>\n","      <td>Low</td>\n","      <td>Urban</td>\n","      <td>13.77</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>16.0</td>\n","      <td>0.21</td>\n","      <td>1.54</td>\n","      <td>0.23</td>\n","      <td>0.71</td>\n","      <td>1.47</td>\n","      <td>False</td>\n","      <td>322.68</td>\n","      <td>False</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>45</td>\n","      <td>Male</td>\n","      <td>Secondary</td>\n","      <td>Medium</td>\n","      <td>Rural</td>\n","      <td>14.57</td>\n","      <td>False</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>...</td>\n","      <td>6.0</td>\n","      <td>0.62</td>\n","      <td>1.25</td>\n","      <td>2.25</td>\n","      <td>0.48</td>\n","      <td>12.62</td>\n","      <td>False</td>\n","      <td>362.98</td>\n","      <td>True</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>Male</td>\n","      <td>Graduate</td>\n","      <td>High</td>\n","      <td>Urban</td>\n","      <td>13.57</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>False</td>\n","      <td>...</td>\n","      <td>19.0</td>\n","      <td>0.46</td>\n","      <td>1.69</td>\n","      <td>4.71</td>\n","      <td>0.35</td>\n","      <td>0.38</td>\n","      <td>True</td>\n","      <td>124.10</td>\n","      <td>True</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-15478ff7-ac97-4af6-948e-b5b8ce92f0a6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-15478ff7-ac97-4af6-948e-b5b8ce92f0a6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-15478ff7-ac97-4af6-948e-b5b8ce92f0a6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-bd44ad1d-fcfa-43d0-8ee8-53432fff3917\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd44ad1d-fcfa-43d0-8ee8-53432fff3917')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-bd44ad1d-fcfa-43d0-8ee8-53432fff3917 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":868},"id":"agd-3x34vtzX","executionInfo":{"status":"ok","timestamp":1759074804954,"user_tz":-330,"elapsed":50,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"f277a29b-84ac-4985-a158-91b8c9b23fd4"},"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                            0\n","gender                         0\n","education_level               50\n","income_bracket                 0\n","location_type                  0\n","hemoglobin_level               0\n","iron_deficiency_status         0\n","comorbidities_count            0\n","lab_test_frequency             0\n","side_effects_reported          0\n","medication_type                0\n","dosage_frequency               0\n","prescription_duration_days     0\n","tablets_dispensed              0\n","pill_count_last_visit          0\n","refill_gap_days               25\n","health_literacy_score         25\n","depression_score              25\n","social_support_index           0\n","belief_in_medication           0\n","distance_to_clinic_km          0\n","insurance_status               0\n","medication_cost_inr            0\n","provider_consistency           0\n","medication_adherence           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>education_level</th>\n","      <td>50</td>\n","    </tr>\n","    <tr>\n","      <th>income_bracket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>location_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>hemoglobin_level</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>iron_deficiency_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>comorbidities_count</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>lab_test_frequency</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>side_effects_reported</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>medication_type</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>dosage_frequency</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>prescription_duration_days</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>tablets_dispensed</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>pill_count_last_visit</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>refill_gap_days</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>health_literacy_score</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>depression_score</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>social_support_index</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>belief_in_medication</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>distance_to_clinic_km</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>insurance_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>medication_cost_inr</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>provider_consistency</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>medication_adherence</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["# Loop through each column in the DataFrame\n","for col in df.columns:\n","    # Check if the column contains text data\n","    if df[col].dtype == 'object':\n","        # If it's text, fill missing values with the most frequent value (mode)\n","        df[col].fillna(df[col].mode()[0], inplace=True)\n","    else:\n","        # If it's not text (so it must be numeric), fill with the median\n","        df[col].fillna(df[col].median(), inplace=True)\n","\n","# Verify that all missing values are gone\n","print(\"Missing values after cleaning:\")\n","print(df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bvcbMjlDvu9Q","executionInfo":{"status":"ok","timestamp":1759075085295,"user_tz":-330,"elapsed":28,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"e9507b96-a6f2-46b4-ba77-61167bc07c97"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Missing values after cleaning:\n","age                           0\n","gender                        0\n","education_level               0\n","income_bracket                0\n","location_type                 0\n","hemoglobin_level              0\n","iron_deficiency_status        0\n","comorbidities_count           0\n","lab_test_frequency            0\n","side_effects_reported         0\n","medication_type               0\n","dosage_frequency              0\n","prescription_duration_days    0\n","tablets_dispensed             0\n","pill_count_last_visit         0\n","refill_gap_days               0\n","health_literacy_score         0\n","depression_score              0\n","social_support_index          0\n","belief_in_medication          0\n","distance_to_clinic_km         0\n","insurance_status              0\n","medication_cost_inr           0\n","provider_consistency          0\n","medication_adherence          0\n","dtype: int64\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-513055593.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].median(), inplace=True)\n","/tmp/ipython-input-513055593.py:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].mode()[0], inplace=True)\n","/tmp/ipython-input-513055593.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].median(), inplace=True)\n","/tmp/ipython-input-513055593.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].median(), inplace=True)\n","/tmp/ipython-input-513055593.py:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].mode()[0], inplace=True)\n","/tmp/ipython-input-513055593.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].median(), inplace=True)\n","/tmp/ipython-input-513055593.py:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].median(), inplace=True)\n"]}]},{"cell_type":"code","source":["# Create mapping dictionaries for ordered features\n","education_map = {'None': 0, 'Secondary': 1, 'Graduate': 2, 'Postgraduate': 3}\n","income_map = {'Low': 0, 'Medium': 1, 'High': 2}\n","\n","# Apply the mapping\n","df['education_level'] = df['education_level'].map(education_map)\n","df['income_bracket'] = df['income_bracket'].map(income_map)"],"metadata":{"id":"2Dsh34TaC9U2","executionInfo":{"status":"ok","timestamp":1759075159059,"user_tz":-330,"elapsed":43,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["# Convert remaining categorical columns into numeric using one-hot encoding\n","df = pd.get_dummies(df, drop_first=True)\n","\n","# The 'drop_first=True' argument prevents multicollinearity by dropping one category from each feature.\n","# For example, gender_Male (1 for Male, 0 for Female) is enough; we don't need a separate gender_Female column."],"metadata":{"id":"3KzNDrkbDNKB","executionInfo":{"status":"ok","timestamp":1759075239357,"user_tz":-330,"elapsed":8,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}}},"execution_count":92,"outputs":[]},{"cell_type":"code","source":["# 'X' contains all columns except the one we want to predict\n","X = df.drop('medication_adherence', axis=1)\n","\n","# 'y' contains only the column we want to predict\n","y = df['medication_adherence']"],"metadata":{"id":"5f7Ka09EDil0","executionInfo":{"status":"ok","timestamp":1759075251482,"user_tz":-330,"elapsed":46,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["# Select boolean columns and convert them to integers\n","bool_cols = X.select_dtypes(include='bool').columns\n","df[bool_cols] = df[bool_cols].astype(int)"],"metadata":{"id":"Z_uH7QYAEFly","executionInfo":{"status":"ok","timestamp":1759075394593,"user_tz":-330,"elapsed":19,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","source":["# Get the list of all column names in the DataFrame X\n","column_list = list(X.columns)\n","\n","# Print the list\n","print(column_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kMCCuclADkZf","executionInfo":{"status":"ok","timestamp":1759075404393,"user_tz":-330,"elapsed":45,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"c47f57f9-fbed-4574-c624-545f67698d5e"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["['age', 'education_level', 'income_bracket', 'hemoglobin_level', 'iron_deficiency_status', 'comorbidities_count', 'lab_test_frequency', 'side_effects_reported', 'prescription_duration_days', 'tablets_dispensed', 'pill_count_last_visit', 'refill_gap_days', 'health_literacy_score', 'depression_score', 'social_support_index', 'belief_in_medication', 'distance_to_clinic_km', 'insurance_status', 'medication_cost_inr', 'provider_consistency', 'gender_Male', 'location_type_Urban', 'medication_type_Iron Tablets', 'medication_type_Oral Supplements', 'dosage_frequency_Monthly', 'dosage_frequency_Weekly']\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Split the data into 80% training and 20% testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Check the shape of the new datasets\n","print(\"X_train shape:\", X_train.shape)\n","print(\"X_test shape:\", X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E1pnPG735B8B","executionInfo":{"status":"ok","timestamp":1759075406627,"user_tz":-330,"elapsed":14,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"3f7862e8-4bcf-4baf-dd79-ece9994241bc"},"execution_count":98,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (400, 26)\n","X_test shape: (100, 26)\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"DgNXllu-5UH5","executionInfo":{"status":"ok","timestamp":1759075494070,"user_tz":-330,"elapsed":424,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"5fc4548e-3a12-419e-ccfb-9d94fd52075f"},"execution_count":99,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-6 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-6 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-6 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-6 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-6 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-6 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-6 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-6 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-6 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-6 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-6 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-6 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-6 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"â–¸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-6 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"â–¾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-6 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-6 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-6 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-6 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-6 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-6 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-6 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-6 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-6 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["print(\"Evaluating the model on the test set...\")\n","# Make predictions on the test data\n","y_pred = model.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5X4nM4foEiuN","executionInfo":{"status":"ok","timestamp":1759075515410,"user_tz":-330,"elapsed":14,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"4d6e3d7b-65aa-45b3-8649-afbe88bcc722"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Evaluating the model on the test set...\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","y_pred = model.predict(X_test)\n","\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(classification_report(y_test, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-_W9Rj275YsZ","executionInfo":{"status":"ok","timestamp":1759075549741,"user_tz":-330,"elapsed":48,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"5bdbbb63-8f69-4dbd-e9b1-310105aaeed2"},"execution_count":102,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.69\n","              precision    recall  f1-score   support\n","\n","           0       0.67      0.63      0.65        46\n","           1       0.70      0.74      0.72        54\n","\n","    accuracy                           0.69       100\n","   macro avg       0.69      0.69      0.69       100\n","weighted avg       0.69      0.69      0.69       100\n","\n"]}]},{"cell_type":"code","source":["corr = X.corrwith(y)\n","print(corr.sort_values(ascending=False).head(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZZ9E3XQ85kOZ","executionInfo":{"status":"ok","timestamp":1759075563763,"user_tz":-330,"elapsed":49,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"b7925891-8255-45ba-d0de-c5248d6a3c4b"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["health_literacy_score         0.297665\n","provider_consistency          0.167828\n","social_support_index          0.165901\n","belief_in_medication          0.138714\n","income_bracket                0.114565\n","education_level               0.052471\n","hemoglobin_level              0.048991\n","age                           0.038394\n","prescription_duration_days    0.024084\n","tablets_dispensed             0.023183\n","dtype: float64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Get feature importances from the trained model\n","importances = model.feature_importances_\n","feature_names = X.columns\n","\n","# Create a DataFrame for visualization\n","feature_importance_df = pd.DataFrame({'feature': feature_names, 'importance': importances})\n","feature_importance_df = feature_importance_df.sort_values(by='importance', ascending=False)\n","\n","# Plot the top 10 features\n","plt.figure(figsize=(10, 6))\n","plt.barh(feature_importance_df['feature'][:10], feature_importance_df['importance'][:10], color='skyblue')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.title('Top 10 Most Important Features')\n","plt.gca().invert_yaxis()  # Display the most important feature at the top\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"g5ORcNEw5qbC","executionInfo":{"status":"ok","timestamp":1759075603173,"user_tz":-330,"elapsed":245,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"f458cbb4-7d21-44be-e33b-1a54fea79599"},"execution_count":104,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["XGBoost"],"metadata":{"id":"_ouhU2NjGaGp"}},{"cell_type":"code","source":["import xgboost as xgb\n","\n","# 1. Define and Train the XGBoost Model\n","# We'll use some common starting parameters.\n","# `use_label_encoder=False` and `eval_metric='logloss'` are used to prevent potential warnings.\n","model_xgb = xgb.XGBClassifier(n_estimators=100, learning_rate=0.1, use_label_encoder=False, eval_metric='logloss', random_state=42)\n","\n","# Fit (train) the model on the same training data\n","print(\"Training the XGBoost model...\")\n","model_xgb.fit(X_train, y_train)\n","print(\"âœ… XGBoost model training complete!\\n\")\n","\n","\n","# 2. Evaluate the Trained Model\n","print(\"Evaluating the XGBoost model on the test set...\")\n","# Make predictions on the test data\n","y_pred_xgb = model_xgb.predict(X_test)\n","\n","# Calculate Accuracy\n","accuracy_xgb = accuracy_score(y_test, y_pred_xgb)\n","print(f\"XGBoost Accuracy: {accuracy_xgb:.2f}\\n\")\n","\n","# Get a detailed Classification Report\n","print(\"XGBoost Classification Report:\")\n","print(classification_report(y_test, y_pred_xgb))\n","\n","# Display the Confusion Matrix\n","print(\"XGBoost Confusion Matrix:\")\n","cm_xgb = confusion_matrix(y_test, y_pred_xgb)\n","sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Greens')\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('XGBoost Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":836},"id":"F8QbcpooFjD3","executionInfo":{"status":"ok","timestamp":1759075815520,"user_tz":-330,"elapsed":805,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"7fab3e2e-2fea-4499-8a22-d44f87b564ea"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["Training the XGBoost model...\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/xgboost/training.py:183: UserWarning: [16:10:12] WARNING: /workspace/src/learner.cc:738: \n","Parameters: { \"use_label_encoder\" } are not used.\n","\n","  bst.update(dtrain, iteration=i, fobj=obj)\n"]},{"output_type":"stream","name":"stdout","text":["âœ… XGBoost model training complete!\n","\n","Evaluating the XGBoost model on the test set...\n","XGBoost Accuracy: 0.68\n","\n","XGBoost Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.66      0.63      0.64        46\n","           1       0.70      0.72      0.71        54\n","\n","    accuracy                           0.68       100\n","   macro avg       0.68      0.68      0.68       100\n","weighted avg       0.68      0.68      0.68       100\n","\n","XGBoost Confusion Matrix:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["HyperParameter Tuning(GridSearchCV)"],"metadata":{"id":"cVbprfiVGdjv"}},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# 1. Define the parameter grid to search\n","# These are some of the most important parameters for a Random Forest\n","param_grid = {\n","    'n_estimators': [100, 200, 300],         # Number of trees in the forest\n","    'max_depth': [10, 20, None],            # Maximum depth of the tree (None means no limit)\n","    'min_samples_split': [2, 5, 10],        # Minimum number of samples required to split a node\n","    'min_samples_leaf': [1, 2, 4]           # Minimum number of samples required at a leaf node\n","}\n","\n","# 2. Create the GridSearchCV object\n","# n_jobs=-1 uses all available CPU cores to speed up the process\n","# cv=5 means 5-fold cross-validation\n","grid_search = GridSearchCV(estimator=RandomForestClassifier(random_state=42),\n","                           param_grid=param_grid,\n","                           cv=5,\n","                           n_jobs=-1,\n","                           verbose=2)\n","\n","# 3. Fit the grid search to the data\n","print(\"Running GridSearchCV... This may take a few minutes.\")\n","grid_search.fit(X_train, y_train)\n","print(\"âœ… Grid search complete!\\n\")\n","\n","# 4. Print the best parameters found\n","print(\"Best parameters found:\")\n","print(grid_search.best_params_)\n","print(\"-\" * 30)\n","\n","# 5. Evaluate the best model on the test set\n","print(\"Evaluating the best model found by GridSearchCV...\")\n","best_model = grid_search.best_estimator_\n","y_pred_best = best_model.predict(X_test)\n","\n","# Calculate Accuracy\n","accuracy_best = accuracy_score(y_test, y_pred_best)\n","print(f\"Tuned Model Accuracy: {accuracy_best:.2f}\\n\")\n","\n","# Get a detailed Classification Report\n","print(\"Tuned Model Classification Report:\")\n","print(classification_report(y_test, y_pred_best))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9IA0hHZyGYmb","executionInfo":{"status":"ok","timestamp":1759076227029,"user_tz":-330,"elapsed":132880,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"67fc28f7-e49a-4fe5-b12c-e8646efc440d"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["Running GridSearchCV... This may take a few minutes.\n","Fitting 5 folds for each of 81 candidates, totalling 405 fits\n","âœ… Grid search complete!\n","\n","Best parameters found:\n","{'max_depth': 10, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n","------------------------------\n","Evaluating the best model found by GridSearchCV...\n","Tuned Model Accuracy: 0.69\n","\n","Tuned Model Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.68      0.61      0.64        46\n","           1       0.69      0.76      0.73        54\n","\n","    accuracy                           0.69       100\n","   macro avg       0.69      0.68      0.68       100\n","weighted avg       0.69      0.69      0.69       100\n","\n"]}]},{"cell_type":"markdown","source":["Conclusions & Inference"],"metadata":{"id":"Yw5b8JSMId-0"}},{"cell_type":"markdown","source":["\n","## 1. The Most Important Factors Aren't Clinical, They're Human\n","This is the single most valuable insight from your model. The initial feature importance analysis clearly showed that the strongest predictors of medication adherence were **socio-behavioral**, not medical.\n","\n","* **Top Predictors:** `health_literacy_score`, `provider_consistency`, `social_support_index`, and `belief_in_medication`.\n","* **Inference:** A patient's understanding of their treatment, their trust in their doctor, their support system, and their personal beliefs are more influential than their raw clinical numbers like hemoglobin levels.\n","* **Conclusion:** Any real-world strategy to improve medication adherence should focus on **patient education, counseling, and improving the patient-provider relationship**. A purely clinical approach would miss the most important drivers of behavior.\n","\n","---\n","## 2. A Realistic Accuracy Baseline Has Been Established\n","We started with an unrealistic **100% accuracy** caused by **data leakage**. After fixing this and building a proper, probabilistic dataset, we found a consistent and believable performance ceiling.\n","\n","* **Inference:** Multiple powerful models (Random Forest and XGBoost) both performed at around **68-69% accuracy**.\n","* **Conclusion:** This **~69% accuracy** is a robust and realistic baseline for this specific problem with the current data. It reflects the inherent difficulty and complexity of predicting human behavior. It tells you what's achievable *right now*.\n","\n","---\n","## 3. The Model is Limited by Data, Not by Tuning\n","Our final step was extensive hyperparameter tuning with `GridSearchCV`. The fact that this process did *not* improve the 69% accuracy is a critical finding.\n","\n","* **Inference:** The model isn't being held back by its settings or configuration. We've already found the optimal settings for the information we have.\n","* **Conclusion:** We have likely extracted the maximum predictive power from the existing features. To get a better score, we don't need a better-tuned model; we need **better, more informative data**. This is precisely why feature engineering is the logical next step.\n","\n","## Final Summary\n","In short, we've successfully built a realistic model that tells a clear story: **focus on the patient's understanding and support system to improve adherence.** The model's predictive accuracy is solid but has hit a ceiling, proving that the next leap in performance will only come from creating more insightful features."],"metadata":{"id":"kRNcMySHIkYR"}},{"cell_type":"markdown","source":["**FEATURE ENGINEERING**"],"metadata":{"id":"jja-Gh1lJG0f"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# --- Step 1: Pre-Cleaning the Input Columns ---\n","# This ensures the columns we're using are clean before we engineer new ones from them.\n","\n","# Fill missing numeric columns with their median\n","for col in ['age', 'comorbidities_count', 'medication_cost_inr']:\n","    if df[col].isnull().any():\n","        df[col].fillna(df[col].median(), inplace=True)\n","\n","# Fill missing categorical columns with their mode\n","if df['income_bracket'].isnull().any():\n","    df['income_bracket'].fillna(df['income_bracket'].mode()[0], inplace=True)\n","\n","print(\"Pre-cleaning complete. All input columns are now clean.\")\n","\n","\n","# --- Step 2: Feature Engineering (Your code, which is correct) ---\n","\n","# Interaction Feature\n","df['frailty_index'] = df['age'] * (df['comorbidities_count'] + 1)\n","\n","# Ratio Feature\n","income_numeric_map = {'Low': 1, 'Medium': 2, 'High': 3}\n","df['income_numeric'] = df['income_bracket'].map(income_numeric_map)\n","df['financial_burden'] = df['medication_cost_inr'] / (df['income_numeric'] + 1)\n","\n","# Binning Feature\n","bins = [17, 35, 55, 81]\n","labels = ['Young_Adult', 'Middle_Aged', 'Senior']\n","df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels, right=False)\n","\n","print(\"\\nNew features created successfully!\")\n","# Check for any remaining NaNs in the new columns\n","print(\"\\nChecking for NaNs in new features:\")\n","print(df[['frailty_index', 'financial_burden', 'age_group']].isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"szDvlO4NIiwf","executionInfo":{"status":"ok","timestamp":1759076884440,"user_tz":-330,"elapsed":21,"user":{"displayName":"Nanda Rishik","userId":"02796979058055990221"}},"outputId":"96aee1f1-7835-4441-966b-001d29e84ff2"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["Pre-cleaning complete. All input columns are now clean.\n","\n","New features created successfully!\n","\n","Checking for NaNs in new features:\n","frailty_index         0\n","financial_burden    500\n","age_group             0\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Explanation of the Engineered Features**\n","\n","Hereâ€™s a breakdown of what each new feature does and why it helps the model.\n","\n","1. Frailty Index\n","What it is: An interaction feature created by multiplying a patient's age by their comorbidities_count (the number of other health conditions they have).\n","\n","Why it's useful: It captures the idea that risk multiplies. For example, the health risk for a 75-year-old with three other conditions is much higher than for a 35-year-old with three conditions. This single frailty_index score communicates that combined risk to the model more effectively than age and comorbidities_count could on their own.\n","\n","2. Financial Burden\n","What it is: A ratio feature that divides the medication_cost_inr by the patient's income_bracket (which we converted to a number).\n","\n","Why it's useful: It provides crucial context. A â‚¹500 medication cost is a minor expense for a high-income patient but can be a major barrier for a low-income patient. By creating a ratio, we transform the absolute cost into a measure of relative financial strain, which is a much stronger predictor of a patient's ability to afford their medication.\n","\n","3. Age Group\n","What it is: A binned feature where we group the continuous age variable into distinct categories like 'Young_Adult', 'Middle_Aged', and 'Senior'.\n","\n","Why it's useful: It helps the model capture non-linear relationships. For example, adherence might be high in young adults, dip in busy middle age, and rise again in seniors. A continuous age variable struggles to capture this up-and-down pattern, but by creating distinct groups, the model can learn the specific behavior of each age_group independently."],"metadata":{"id":"IJCjIPZ7J46x"}},{"cell_type":"code","source":[],"metadata":{"id":"6-A1Nw9tKA_z"},"execution_count":null,"outputs":[]}]}